[gd_scene load_steps=12 format=3 uid="uid://b1ot6gn6tms6h"]

[ext_resource type="PackedScene" uid="uid://prh35jb6tjtd" path="res://player/sophia_skin/sophia_skin.tscn" id="2_4dj54"]
[ext_resource type="AudioStream" uid="uid://bhoyegbjust84" path="res://player/sounds/robot_land.wav" id="3_kbqxf"]
[ext_resource type="AudioStream" uid="uid://b4x0f4pgfifoo" path="res://player/sounds/robot_jump.wav" id="4_1v0dq"]

[sub_resource type="GDScript" id="GDScript_8frn1"]
script/source = "extends CharacterBody3D

@export_group(\"Movement\")
## Character maximum run speed on the ground in meters per second.
@export var move_speed := 8.0
## Ground movement acceleration in meters per second squared.
@export var acceleration := 20.0
## When the player is on the ground and presses the jump button, the vertical
## velocity is set to this value.
@export var jump_impulse := 12.0
## Player model rotation speed in arbitrary units. Controls how fast the
## character skin orients to the movement or camera direction.
@export var rotation_speed := 12.0
## Minimum horizontal speed on the ground. This controls when the character skin's
## animation tree changes between the idle and running states.
@export var stopping_speed := 1.0

@export_group(\"Camera\")
@export_range(0.0, 1.0) var mouse_sensitivity := 0.25
@export var tilt_upper_limit := PI / 3.0
@export var tilt_lower_limit := -PI / 8.0

## Each frame, we find the height of the ground below the player and store it here.
## The camera uses this to keep a fixed height while the player jumps, for example.
var ground_height := 0.0

var _gravity := -30.0
var _was_on_floor_last_frame := true
var _camera_input_direction := Vector2.ZERO

## The last movement or aim direction input by the player. We use this to orient
## the character model.
@onready var _last_input_direction := global_basis.z
# We store the initial position of the player to reset to it when the player falls off the map.
@onready var _start_position := global_position

@onready var _camera_pivot: Node3D = %CameraPivot
@onready var _camera: Camera3D = %Camera3D
@onready var _skin: SophiaSkin = %SophiaSkin
@onready var _landing_sound: AudioStreamPlayer3D = %LandingSound
@onready var _jump_sound: AudioStreamPlayer3D = %JumpSound
@onready var _dust_particles: GPUParticles3D = %DustParticles


func _ready() -> void:
	Events.kill_plane_touched.connect(func on_kill_plane_touched() -> void:
		global_position = _start_position
		velocity = Vector3.ZERO
		_skin.idle()
		set_physics_process(true)
	)
	Events.flag_reached.connect(func on_flag_reached() -> void:
		set_physics_process(false)
		_skin.idle()
		_dust_particles.emitting = false
	)


func _input(event: InputEvent) -> void:
	if event.is_action_pressed(\"ui_cancel\"):
		Input.mouse_mode = Input.MOUSE_MODE_VISIBLE
	elif event.is_action_pressed(\"left_click\"):
		Input.mouse_mode = Input.MOUSE_MODE_CAPTURED


func _unhandled_input(event: InputEvent) -> void:
	var player_is_using_mouse := (
		event is InputEventMouseMotion and Input.get_mouse_mode() == Input.MOUSE_MODE_CAPTURED
	)
	if player_is_using_mouse:
		_camera_input_direction.x = -event.relative.x * mouse_sensitivity
		_camera_input_direction.y = -event.relative.y * mouse_sensitivity


func _physics_process(delta: float) -> void:
	_camera_pivot.rotation.x += _camera_input_direction.y * delta
	_camera_pivot.rotation.x = clamp(_camera_pivot.rotation.x, tilt_lower_limit, tilt_upper_limit)
	_camera_pivot.rotation.y += _camera_input_direction.x * delta

	_camera_input_direction = Vector2.ZERO

	# Calculate movement input and align it to the camera's direction.
	var raw_input := Input.get_vector(\"move_left\", \"move_right\", \"move_up\", \"move_down\", 0.4)
	# Should be projected onto the ground plane.
	var forward := _camera.global_basis.z
	var right := _camera.global_basis.x
	var move_direction := forward * raw_input.y + right * raw_input.x
	move_direction.y = 0.0
	move_direction = move_direction.normalized()

	# To not orient the character too abruptly, we filter movement inputs we
	# consider when turning the skin. This also ensures we have a normalized
	# direction for the rotation basis.
	if move_direction.length() > 0.0:
		_last_input_direction = move_direction.normalized()
	var target_angle := Vector3.BACK.signed_angle_to(_last_input_direction, Vector3.UP)
	_skin.global_rotation.y = lerp_angle(_skin.rotation.y, target_angle, rotation_speed * delta)

	# We separate out the y velocity to only interpolate the velocity in the
	# ground plane, and not affect the gravity.
	var y_velocity := velocity.y
	velocity.y = 0.0
	velocity = velocity.move_toward(move_direction * move_speed, acceleration * delta)
	if is_equal_approx(move_direction.length_squared(), 0.0) and velocity.length_squared() < stopping_speed:
		velocity = Vector3.ZERO
	velocity.y = y_velocity + _gravity * delta

	# Character animations and visual effects.
	var ground_speed := Vector2(velocity.x, velocity.z).length()
	var is_just_jumping := Input.is_action_just_pressed(\"jump\") and is_on_floor()
	if is_just_jumping:
		velocity.y += jump_impulse
		_skin.jump()
		_jump_sound.play()
	elif not is_on_floor() and velocity.y < 0:
		_skin.fall()
	elif is_on_floor():
		if ground_speed > 0.0:
			_skin.move()
		else:
			_skin.idle()

	_dust_particles.emitting = is_on_floor() && ground_speed > 0.0

	if is_on_floor() and not _was_on_floor_last_frame:
		_landing_sound.play()

	_was_on_floor_last_frame = is_on_floor()
	move_and_slide()
"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_e8pdu"]
radius = 0.4

[sub_resource type="Curve" id="Curve_3f17x"]
_data = [Vector2(0, 0.742241), 0.0, 0.0, 0, 0, Vector2(0.139952, 0.986755), 0.129787, 0.129787, 0, 0, Vector2(0.631579, 1), 0.0, 0.0, 0, 0, Vector2(0.785885, 0.873668), -1.98736, -1.98736, 0, 0, Vector2(1, 0.0148119), -5.26067, 0.0, 0, 0]
point_count = 5

[sub_resource type="CurveTexture" id="CurveTexture_8asvs"]
width = 32
curve = SubResource("Curve_3f17x")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_tqdcj"]
lifetime_randomness = 0.33
emission_shape = 1
emission_sphere_radius = 0.1
direction = Vector3(0, 1, 0)
spread = 90.0
initial_velocity_min = 0.1
initial_velocity_max = 0.35
gravity = Vector3(0, 0.5, 0)
tangential_accel_min = -2.23517e-06
tangential_accel_max = 0.199998
scale_min = 0.8
scale_max = 1.2
scale_curve = SubResource("CurveTexture_8asvs")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_kpdwg"]
shading_mode = 2
vertex_color_use_as_albedo = true
albedo_color = Color(0.536729, 0.511356, 0.854902, 1)

[sub_resource type="SphereMesh" id="SphereMesh_vpbss"]
material = SubResource("StandardMaterial3D_kpdwg")
radius = 0.15
height = 0.3
radial_segments = 8
rings = 8

[sub_resource type="SeparationRayShape3D" id="SeparationRayShape3D_h1hkf"]
length = 0.5
slide_on_slope = true

[node name="Player3DTemplate" type="CharacterBody3D"]
axis_lock_angular_x = true
axis_lock_angular_y = true
axis_lock_angular_z = true
script = SubResource("GDScript_8frn1")
acceleration = 30.0

[node name="CharacterCollisionShape" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
shape = SubResource("CapsuleShape3D_e8pdu")

[node name="SophiaSkin" parent="." instance=ExtResource("2_4dj54")]
unique_name_in_owner = true

[node name="DustParticles" type="GPUParticles3D" parent="SophiaSkin"]
unique_name_in_owner = true
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.136607, -0.190934)
cast_shadow = 0
gi_mode = 0
amount = 10
lifetime = 0.7
explosiveness = 0.05
process_material = SubResource("ParticleProcessMaterial_tqdcj")
draw_pass_1 = SubResource("SphereMesh_vpbss")

[node name="LandingSound" type="AudioStreamPlayer3D" parent="."]
unique_name_in_owner = true
stream = ExtResource("3_kbqxf")
volume_db = 1.0

[node name="JumpSound" type="AudioStreamPlayer3D" parent="."]
unique_name_in_owner = true
stream = ExtResource("4_1v0dq")
volume_db = 1.0

[node name="CameraPivot" type="Node3D" parent="."]
unique_name_in_owner = true
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.09401, 0)

[node name="SpringArm3D" type="SpringArm3D" parent="CameraPivot"]
transform = Transform3D(-1, 2.1052e-08, -1.40279e-07, -3.23484e-08, 0.929023, 0.370022, 1.38112e-07, 0.370022, -0.929023, 0, 0.33984, 0)
shape = SubResource("SeparationRayShape3D_h1hkf")
spring_length = 8.0

[node name="Camera3D" type="Camera3D" parent="CameraPivot/SpringArm3D"]
unique_name_in_owner = true
transform = Transform3D(1, 3.19744e-14, 2.13163e-14, 0, 1, 0, 0, 0, 1, -2.4869e-14, 2.38419e-07, 10)
current = true
fov = 50.0
